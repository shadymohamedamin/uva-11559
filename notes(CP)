string to_string(int num)
{
    stringstream ss;
    ss << num;
    return ss.str();
}





ll fast_pow(ll a,ll b,ll M)
{
    ll res = 1;
    while ( b > 0 )
    {
        if ( b&1 ) res = (res*a)%M;
        a = (a*a)%M;
        b >>= 1;
    }
    return res;
}



ll calculatePower(ll base, ll powerRaised)
{
    if (powerRaised != 0)
        return (base*calculatePower(base, powerRaised-1));
    else
        return 1;
}


/*ll calculatePower(ll base, ll powerRaised)
{
    if (powerRaised != 0)
        return (base*calculatePower(base, powerRaised-1));
    else
        return 1;
}*/
inline ll exp(ll b, ll p, ll m) {
	ll r=1;
	while(p) {
		if(p&1)
			r=(__int128)r*b%m;
		b=(__int128)b*b%m;
		p/=2;
	}
	return r;
}
/*ll power(__int128 a,__int128 b,ll m){
    __int128 result = 1;
    while(b>0){
        if(b%2==1){
            result = (result*a)%m;b--;
        }
        a = (a*a)%m;b/=2;
    }
    return result;
}*/





   //     string name=to_string(x);  //from int to string
    //    long long y=stoll(name);   //from string to int
   // tolower  //to lower case of char
   // isalpha()      to check if this alpha or not
   
   
   
   
   
   
   
   for(int i=l;i>0&&s>0;i--)
    cout<<(i&-i)<<" "<<(i&i)<<endl;
   
   
   
   
   
   
   
/*string from_d_to_binary(ll n)
{
    string name="";
    while(n>0)
    {
        string h=to_string(n%2);
        name+=h;
        n/=2;
    }
    reverse(name.begin(),name.end());
    return name;
}*/




 //nums.erase( unique( nums.begin(), nums.end() ), nums.end() );   
 
 
 
 static bool     _foo = ios::sync_with_stdio(false);              leetcode
static ostream* _bar = cin.tie(NULL);




ll findlcm(ll arr[], ll n)
{
    // Initialize result
    ll ans = arr[0];

    // ans contains LCM of arr[0], ..arr[i]
    // after i'th iteration,
    for (ll i = 1; i < n; i++)
        ans = (((arr[i] * ans)) /
                (gcd(arr[i], ans)));

    return ans;
}






ll findGCD(ll arr[], ll n)
{
    ll result = arr[0];
    for (ll i = 1; i < n; i++)
    {
        result = gcd(arr[i], result);

        if(result == 1)
        {
           return 1;
        }
    }
    return result;
}






map<string,map<string,string> >bends;
  bends["+x"]["+y"] = "+y";





//sort array
 int i=0;
    while(i<v.size()){
            if(v[i]!=v[v[i]-1])
                swap(v[i],v[v[i]-1]);
            else
                i++;
        }






//for (string::iterator it = temp.begin(); it != temp.end(); ++it)
//ios_base::sync_with_stdio(0);
//cin.tie(0);
//cin.ignore();

//custom sort
/*bool cmp(int s,int f)   //if we replace f with s , the program will print 5 3 1    4 2
{
        if(f%2==1&&s%2==0)
        return true;
        if(f%2==0&&s%2==1)
        return false;
        if(f%2==0&&s%2==0&&f<s)
        return true;
        if(f%2==1&&s%2==1&&f<s)
        return true;
         if(f%2==0&&s%2==1&&f>s)
        return false;
}
sort(v.begin(),v.end(),cmp);*/


//while(getline(cin,name)&&name!="")
 //   int l=name.find(' ');
//    temp1=name.substr(0,l);
 //   temp2=name.substr(l+1,name.size()-1);




 /* if(isalpha(name[i]))
            if(isupper(name[i]))
            {
                temp2+=name[i]+32;
            }
           else
        temp2+=name[i];*/
         // temp2+=tolower(name[i]);


//name.size() if differ from name.length()



/*int n;
cin>>n;
map<int,int>mp1,mp2;
map<pair<int,int>,int>mp;
long long s=0;
for(int i=0;i<n;i++)
{
        int x,y;
        cin>>x>>y;
        mp1[x]++;mp2[y]++;mp[{x,y}]++;
        s+=mp1[x]+mp2[y]-(mp[{x,y}]-1)-2;
}*/
/*long long s=0;
for(auto &i:mp1)
    s+=1LL*i.second*(i.second-1)/2;
for(auto &i:mp2)
    s+=1LL*i.second*(i.second-1)/2;
for(auto &i:mp)
    s-=1LL*i.second*(i.second-1)/2;*/
//cout<<s;



//iota(f,f+n,0);



//vector<bool>visit(m,false);
 //visit[k-1]=!visit[k-1];          //switch on and off



/* inline ll is(ll b)
{
  for(ll i=2;i*i<=b;i++)
    while(b%(i*i)==0)
    b/=i;
return b;
}*/




//bitset
//bit_and
//bit_or
//bit_xor
//multimap


//while(~scanf("%lld%lld",&n,&m))


 /*for(ll i=1;i<(1<<n);i++)   //bit masks
 {
     ll bits=0;
     for(ll j=0;j<m;j++)
     {
         if(i&(1<<j))
         {
             bits++;*/




/*vector<int> help(const vector<int>&v,int n)
int main()
{
      vector<int>v;
    vector<int>nm;
    nm=help(v,n);
}*/



//int cb = count(s.begin(), s.end(), 'B');







long long int r(long long int x)
{
    long long int s=0,d=0;
    while(x>0)
    {
        d=x%10;
        s+=d;
        x/=10;
    }
    return s/10==0?s:r(s);
}







long long gcd(long long int a, long long int b)
{
  if (b == 0)
    return a;
  return gcd(b, a % b);
}









long long lcm(int a, int b)
{
    return (a / gcd(a, b)) * b;
}








bool palindrome(string s)
{
    string temp=s;
    reverse(s.begin(),s.end());
    if(s==temp) return true;
    else return false;
}








typedef long long ll;
bool prime(ll n)
{
    if(n==2||n==3) return true;
    if(n<2) return false;
    if(n%2==0||n%3==0) return false;
    for(ll i=3;i*i<=n;i+=2)
        if(n%i==0)
            return false;
    return true;
}










/*int count_prime_in_range(int n)
{
    int c=0;
    vector<bool>isprime(n+1,true);
    isprime[0]=isprime[1]=0;
    for(int i=2;i*i<=n;i++)
    {
        if(isprime[i])
        for(int j=i*2;j<=n;j+=i)
        isprime[j]=0;
    }
    for(int i=0;i<n.size();i++)
        if(isprime[i])
        c++;
    return c;
}*/









ll findlcm(ll arr[], ll n)
{
    // Initialize result
    ll ans = arr[0];

    // ans contains LCM of arr[0], ..arr[i]
    // after i'th iteration,
    for (ll i = 1; i < n; i++)
        ans = (((arr[i] * ans)) /
                (gcd(arr[i], ans)));

    return ans;
}








ll findGCD(ll arr[], ll n)
{
    ll result = arr[0];
    for (ll i = 1; i < n; i++)
    {
        result = gcd(arr[i], result);

        if(result == 1)
        {
           return 1;
        }
    }
    return result;
}






/*

namespace faculty
{
    void shady()
    {
        cout<<"shady is an engineer in faculty of engineering";
    }
}
using namespace faculty;
int main()
{
    shady();
return 0;
}

*/














//intersect of two ectors

        sort(v1.begin(),v1.end());
        sort(v2.begin(),v2.end());
        set_intersection(v1.cbegin(),v1.cend(),v2.cbegin(),v2.cend(),back_inserter(n));
	
	 set_intersection(v1.begin(),v1.end(),v2.begin(),v2.end(),back_inserter(n));
	
	
	
	with two pointers
	
	        vector<int>n; 
        sort(v1.begin(),v1.end());
        sort(v2.begin(),v2.end());
        auto it1=v1.begin(),it2=v2.begin();
        while(it1!=v1.end()&&it2!=v2.end())
        {
            if(*it1<*it2) *it1++;
            else if(*it1>*it2) *it2++;
            else {n.push_back(*it1);*it1++;*it2++;}
        }
	
	



fill(remove(begin(nums), end(nums), 0), end(nums), 0); 
[0,1,0,3,12]
Output
[1,3,12,0,0]


//std::rotate(v.begin(),v.begin()+k,v.end());



























typedef long long unsigned lu;         //combination
lu ncr(lu n, lu k)
{
    lu res = 1;
    if (k > n - k)
        k = (n - k);
    for (lu i = 0; i < k; ++i) {
        res *= (n - i);
        res /= (i + 1);
    }
    return res;
}
 
lu big_mod(lu base, lu power, lu mod)
{
    if(power==0)    return 1;
 
    else if(power%2==1)
    {
        lu p1 = base % mod;
        lu p2 = (big_mod(base,power-1,mod))%mod;
        return (p1*p2)%mod;
    }
    else if(power%2==0)
    {
        lu p1 = (big_mod(base,power/2,mod))%mod;
        return (p1*p1)%mod;
    }
}


















 // k mod x=y
    cout<<((n-y)/x)*x+y<<endl;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    //o(2 power n)
    int fibo(int n){if(n<=1)return 1;else return fibo(n-1)+fibo(n-1);}
    the number of nodes is equal 2 power the level
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    vector<int>v;
  vector<vector<int>> permute(vector<int>& nums) {
      //  vector<int>v;
        vector<vector<int> >w;
        v=nums;
        w.push_back(v);
        next_permutation(v.begin(),v.end());
        while(v!=nums)
        {
            w.push_back(v);
            next_permutation(v.begin(),v.end());
        }
        return w;
    }
void get_permutation()
{
    int n;
    cin>>n;
      vector<int>v(n);//={1,2,3};
    for(int i=0;i<n;i++)
        cin>>v[i];
         vector<vector<int> >perm=permute(v);
    for(int i=0;i<perm.size();i++)
    {
        for(int j=0;j<perm[i].size();j++)
        {
            cout<<perm[i][j]<<" ";
        }
        cout<<endl;
    }
}











//back_tracking
vector<vector<int>> ans;
    void solve(vector<int> nums, int l, int r){
        if(l == r){
            ans.push_back(nums);
            return;
        }
        for(int i = l; i <= r; i++){
            swap(nums[i], nums[l]);
            solve(nums, l+1, r);
            swap(nums[i], nums[l]);
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        solve(nums, 0, nums.size() - 1);
        return ans;
    }
};






